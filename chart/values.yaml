# Default values for PolyNSI.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: ghcr.io/workfloworchestrator/polynsi
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
  command:
    - "java"
  args:
    - "-Dspring.config.location=/usr/local/etc/polynsi/application.properties"
    - "-jar"
    - "polynsi.jar"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80  # polynsi:80 mapped to document_server_port (default 8080)
  grpc: 80  # polynsi-grpc:80 mapped to grpc_server_insecure_port (default 50051)

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /soap
          pathType: ImplementationSpecific
          serviceName: polynsi
          servicePort: 80
        - path: /discovery
          pathType: ImplementationSpecific
          serviceName: supa
          servicePort: 80
        - path: /topology
          pathType: ImplementationSpecific
          serviceName: supa
          servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# if you do not want to use ingress annotations to generate the Certificate manifest
certificate:
  enabled: false
  name: chart-example-tls
  dnsName: example.domain.toplevel
  issuerRef:
    name: letsencrypt
  secretName: chart-example-tls
  privateKey:
    rotationPolicy: Always
  keystores:
    jks:
      create: false
      password: "secret"
    pkcs12:
      create: false
      password: "secret"

resources:
   limits:
     cpu: 1000m
     memory: 512Mi
   requests:
     cpu: 10m
     memory: 256Mi

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: false
  mountPath: /usr/local/var/db
  subPath:
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 1Gi

readinessProbe:
  enabled: true
  path: /soap
  port: 8080
  failureThreshold: 3
  initialDelaySeconds: 20
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

livenessProbe:
  enabled: true
  path: /soap
  port: 8080
  failureThreshold: 3
  initialDelaySeconds: 20
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

config:
  #
  # PolyNSI needs the following four configuration files:
  # - application.properties
  # - logback-spring.xml
  # - polynsi-keystore.jks
  # - polynsi-truststore.jks
  #
  # When config.configMapName is defined it must point to an existing configmap, managed outside of Helm,
  # that contains all necessary configuration files. Otherwise, Helm will create a configmap with files from
  # a folder pointed to by config.filesGlob, or the combination of config.inlineData and config.inlineBinaryData
  # is used. Note that filesGlob takes precedence over inline data.
  #
  # When config.keystore.secretName is defined it must point to an existing secret, managed outside of Helm,
  # the file pointed to by config.keystore.key will be mapped to polynsi-keystore.jks. In this case the configmap
  # does not need to contain a keystore. To use a truststore from a secret use config.truststore.
  #
  #configMapName: my-configmap-with-config
  #filesGlob: "config/*"
  inlineData: |-
    application.properties: |-
      debug=false
      logging.config=file:/usr/local/etc/polynsi/logback-spring.xml
      cxf.path=/soap
      soap.server.connection_provider.path=/connection/provider
      soap.server.connection_requester.path=/connection/requester
      nl.surf.polynsi.verify-ssl-client-subject-dn=false
      nl.surf.polynsi.ssl-client-subject-dn-header=ssl-client-subject-dn
      nl.surf.polynsi.client.certificate.distinguished-names[0]=CN=CertA,OU=Dept X,O=Company 1,C=NL
      nl.surf.polynsi.client.certificate.distinguished-names[1]=CN=CertB,OU=Dept Y,O=Company 2,C=NL
      nl.surf.polynsi.client.certificate.distinguished-names[2]=CN=CertC,OU=Dept Z,O=Company 3,C=NL
      server.port=8080
      server.ssl.enabled=false
      server.ssl.client-auth=need
      server.ssl.key-store=/usr/local/etc/polynsi/key/polynsi-keystore.jks
      server.ssl.key-store-type=jks
      server.ssl.key-store-password=secret
      server.ssl.trust-store=/usr/local/etc/polynsi/trust/polynsi-truststore.jks
      server.ssl.trust-store-type=jks
      server.ssl.trust-store-password=secret
      grpc.server.port=9090
      grpc.client.connection_provider.address=static://localhost:50051
      grpc.client.connection_provider.negotiationType=PLAINTEXT
    logback-spring.xml: |-
      <configuration>
          <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
          <include resource="org/springframework/boot/logging/logback/console-appender.xml" />
          <root level="INFO">
              <appender-ref ref="CONSOLE" />
          </root>
          <logger name="org.springframework.web" level="INFO"/>
          <!-- set to WARN to prevent ReflectionServiceFactoryBean create message -->
          <logger name="org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean" level="WARN"/>
          <!-- set to WARN to suppress logging of in and out SOAP message -->
          <logger name="org.apache.cxf.services" level="WARN"/>
          <!-- set to TRACE for detailed connection provider logging including protobuf message -->
          <logger name="nl.surf.polynsi.soap.connection.provider.ConnectionServiceProviderPortImpl" level="INFO"/>
          <!-- set to TRACE for detailed connection requester logging including protobuf message -->
          <logger name="nl.surf.polynsi.grpc.connection.requester.ConnectionRequesterService" level="INFO"/>
      </configuration>
  # When using inline key and trust stores, please replace the Lorem Ipsum below with actual stores.
  inlineBinaryData: |-
    polynsi-keystore.jks: |-
      TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2Vk
      IGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlx
      dWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFt
      Y28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0
      ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1
      bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBj
      dXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1v
      bGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLgo=
    polynsi-truststore.jks: |-
      TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2Vk
      IGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlx
      dWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFt
      Y28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0
      ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1
      bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBj
      dXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1v
      bGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLgo=
  # Use keystore and truststore below to override the polynsi-keystore.jks and/or polynsi-truststore.jks
  # from the configmap above. For example to use a keystore generated by certmanager.
  keystore:
    #secretName: my-polynsi-keystore
    #key: keystore.jks
  truststore:
    #secretName: my-polynsi-truststore
    #key: truststore.jks
  # Create /config/trust/nsi-safnari-truststore.jks from ca.crt from caSecretName mounted under /ca
  caSecretName: ""
